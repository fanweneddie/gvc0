#use <conio>
#use <string>

int GROW_CAPACITY (int oldCapacity){
  return ((oldCapacity) < 128 ? 128 : (oldCapacity) + 128);
}

int hash(int index, int arrayLength)
    //@requires index >= 0;
    //@ensures \result >= 0 && \result < arrayLength;
{
    index = ((index >> 16) ^ index) * 0x45d9f3b;
    index = ((index >> 16) ^ index) * 0x45d9f3b;
    index = (index >> 16) ^ index;
    return index % arrayLength;
}

OwnedFields* initOwnedFields( int * instanceCounter){
  OwnedFields* fields = alloc(OwnedFields);
  fields->instanceCounter = instanceCounter;
  int oldCapacity = 0;
  fields->capacity = GROW_CAPACITY(oldCapacity);
  fields->contents = alloc_array(FieldArray*, fields->capacity);

  for(int i = 0; i < fields->capacity; i += 1){
    fields->contents[i] = NULL;
  }
  return fields;
}

void grow(OwnedFields* fields)

{
  int oldCapacity = fields->capacity;
  fields->capacity = GROW_CAPACITY(oldCapacity);
  FieldArray*[] newContents = alloc_array(FieldArray*, fields->capacity);
  for(int i = 0; i<oldCapacity; i += 1){
    if(fields->contents[i] != NULL && !fields->contents[i]->deleted){
        int _id = fields->contents[i]->_id;
        int newIndex = hash(_id, fields->capacity);
        while(newContents[newIndex] != NULL){
            newIndex = (newIndex + 1) % fields->capacity;
        }
        newContents[newIndex] = fields->contents[i];
    }
  }
  fields->contents = newContents;
}

FieldArray* find(OwnedFields* fields, int _id){
  if(_id >= 0){
    int index = hash(_id, fields->capacity);
    while(fields->contents[index] != NULL){
        if(!fields->contents[index]->deleted && fields->contents[index]->_id == _id){
            return fields->contents[index];
        }else{
            index = (index + 1) % fields->capacity;
        }
      }
    }
  return NULL;
}

FieldArray * newFieldArray(OwnedFields * fields, int _id, int numFields, bool accAll)
  //@requires fields != NULL && _id >= 0 && numFields > 0;
  //@ensures fields != NULL && fields->capacity > fields->length;
{
  if(fields->length > (fields->capacity * (4/5))) grow(fields);

  int fieldIndex = hash(_id, fields->capacity);
  while(fields->contents[fieldIndex] != NULL && !fields->contents[fieldIndex]->deleted) fieldIndex = (fieldIndex + 1) % fields->capacity;

  FieldArray * array = alloc(FieldArray);
  fields->contents[fieldIndex] = array;
  fields->length += 1;

  array->contents = alloc_array(bool, numFields);
  array->length = numFields;
  array->_id = _id;
  array->deleted = false;

  for(int i = 0; i<array->length; i += 1){
    array->contents[i] = accAll;
  }
  if(accAll) {
    array->numAccessible = array->length;
  } else {
    array->numAccessible = 0;
  }
  return fields->contents[fieldIndex];
}

int addStructAcc(OwnedFields * fields, int numFields){
    newFieldArray(fields, *fields->instanceCounter, numFields, true);
    *(fields->instanceCounter) += 1;
    return *(fields->instanceCounter) - 1;
}

void addAcc(OwnedFields * fields, int _id, int numFields, int fieldIndex){
  FieldArray * array = find(fields, _id);
  if(array != NULL){
    if(!array->contents[fieldIndex]){
        array->numAccessible += 1;
        array->contents[fieldIndex] = true;
    }
  }else{
    array = newFieldArray(fields, _id, numFields, false);
    array->contents[fieldIndex] = true;
    array->numAccessible += 1;
  }
}

void assertAcc(OwnedFields* fields, int _id, int fieldIndex, string errorMessage){
    FieldArray* toCheck = find(fields, _id);
    if(toCheck == NULL || !toCheck->contents[fieldIndex]){
        error(errorMessage);
    }
}

void addAccEnsureSeparate(OwnedFields* fields, int _id, int fieldIndex, int numFields, string errorMessage){
    FieldArray* toCheck = find(fields, _id);
    if (toCheck == NULL) {
        toCheck = newFieldArray(fields, _id, numFields, false);
    } else if (toCheck->contents[fieldIndex]) {
        error(errorMessage);
    }
    toCheck->contents[fieldIndex] = true;
    toCheck->numAccessible += 1;
}

void loseAcc(OwnedFields* fields, int _id, int fieldIndex){
    FieldArray * toLose = find(fields, _id);
    if(toLose != NULL){
        if(fieldIndex >= toLose->length){
            error("[INTERNAL] Field index exceeds maximum for the given struct.\n");
        }else if(toLose->contents[fieldIndex]){
            toLose->contents[fieldIndex] = false;
            toLose->numAccessible -= 1;
        }
        if(toLose->numAccessible == 0) toLose->deleted = true;
    }
}

void join(OwnedFields* target, OwnedFields* source){
    if(source != NULL && target != NULL){
        for(int i = 0; i<source->capacity; i += 1){
            FieldArray* currFields = source->contents[i];
            if(currFields != NULL && currFields->numAccessible > 0 ){
                for(int j = 0; j< currFields->length; j += 1){
                    addAcc(target, currFields->_id, currFields->length, j);
                }
            }
        }
    }
}

void printof(OwnedFields* fields) {
    if (fields != NULL) {
	    print("OwnedFields: [ ");
        for (int i = 0; i < fields->capacity; i += 1) {
            FieldArray* currFields = fields->contents[i];
			if (currFields != NULL && !currFields->deleted) {
			    print("(");
				printint(currFields->_id);
				print(",");
			    for (int j = 0; j < currFields->length; j +=1) {
				    print(" ");
			        printbool(currFields->contents[j]);
			    }
				print(") ");
			}
        }
		print("]\n");
    } else {
	  println("OwnedFields is empty/NULL");
	}
}