#use <runtime>

// Use some internal methods for testing
FieldArray* runtime_find(OwnedFields* fields, int id);
bool runtime_tryAdd(OwnedFields* fields, int id, int numFields, int fieldIndex);

bool checkAcc(OwnedFields* fields, int id, int fieldIndex) {
    FieldArray* entry = runtime_find(fields, id);
    return entry != NULL && entry->contents[fieldIndex];
}

void test_init() {
    print("test_init: ");

    OwnedFields* fields = runtime_init();
    assert(fields->capacity > 0);
    assert(fields->length == 0);
    for (int i = 0; i < fields->capacity; i++)
        assert(fields->contents[i] == NULL);

    println("PASS");
}

void test_addAll() {
    print("test_addAll: ");
    OwnedFields* fields = runtime_init();

    int id = 123;
    int numFields = 80;
    runtime_addAll(fields, id, numFields);

    FieldArray* entry = runtime_find(fields, id);
    assert(entry != NULL);
    assert(entry->accessible == numFields);

    for (int i = 0; i < numFields; i++) {
        runtime_assert(fields, id, i,
            "(addAll) Failed to verify access to the fields of a newly created struct.");
    }

    println("PASS");
}

void test_add(){
    print("test_add: ");

    OwnedFields* fields_1 = runtime_init();
    OwnedFields* fields_2 = runtime_init();

    int id = 0;
    runtime_addAll(fields_1, id, 4);

    runtime_add(fields_2, id, 4, 2, "add failed (2)");
    runtime_add(fields_2, id, 4, 3, "add failed (3)");

    // Has the fields we added
    runtime_assert(fields_2, id, 2, "assert failed (2)");
    runtime_assert(fields_2, id, 3, "assert failed (3)");

    // Doesn't have another field
    assert(!checkAcc(fields_2, id, 1));

    println("PASS");
}

void test_remove() {
    print("test_remove: ");

    OwnedFields* fields = runtime_init();
    
    int numFields = 2;
    runtime_addAll(fields, 0, numFields);
    runtime_addAll(fields, 1, numFields);
    runtime_addAll(fields, 2, numFields);

    runtime_remove(fields, 0, 0, "remove failed (0.0)");
    runtime_remove(fields, 0, 1, "remove failed (0.1)");
    runtime_remove(fields, 1, 1, "remove failed (1.1)");
    runtime_remove(fields, 2, 0, "remove failed (2.0)");

    assert(!checkAcc(fields, 0, 0));
    assert(!checkAcc(fields, 0, 1));
    assert(checkAcc(fields, 1, 0));
    assert(!checkAcc(fields, 1, 1));
    assert(!checkAcc(fields, 2, 0));
    assert(checkAcc(fields, 2, 1));

    println("PASS");
}

void test_resizing() {
    println("test_resizing: ");

    OwnedFields* fields = runtime_init();

    int numFields = 5;
    for (int id = 0; id < 1024; id++) {
        runtime_add(fields, id, numFields, id % numFields, "add failed");
    }

    for (int id = 0; id < 1024; id++) {
        assert(checkAcc(fields, id, id % numFields));
    }

    for (int id = 0; id < 1024; id++) {
        for (int f = 0; f < numFields; f++) {
            assert((f == id % numFields) || !checkAcc(fields, id, f));
        }
    }

    println("PASS");
}

void test_resizingRemove() {
    print("test_resizingRemove: ");

    OwnedFields* fields = runtime_init();

    // Depends on implementation details
    assert(fields->capacity == 128);

    // Add 1024 records, forcing a resize
    int numFields = 2;
    for (int i = 0; i < 1023; i++) {
        runtime_addAll(fields, i, numFields);
    }

    assert(fields->length == 1023);
    assert(fields->capacity == 1280); // 80% of 1280 is 1024, and we added 1023

    // Remove all (both) fields from the first 1000 records
    for (int i = 0; i < 1000; i++) {
        runtime_remove(fields, i, 0, "remove failed (0)");
        runtime_remove(fields, i, 1, "remove failed (1)");
    }

    assert(fields->length == 1023); // Unused records are included in length
    assert(fields->capacity == 1280);

    // Add back 1000 more records (with different IDs)
    // But this should not need to allocate more records since it can drop the
    // now-unused ones
    for (int i = 2000; i < 3000; i++) {
        runtime_addAll(fields, i, numFields);
    }

    // Theoretically, this could proceed without hitting the resize logic, if
    // every new insertion collided with an unused index. However, there is low
    // probability of this happening.

    assert(fields->length == 1023);
    assert(fields->capacity == 1280);

    // Verify that we still have access to IDs 1000-1022 and 2000-2999
    runtime_print(fields);
    for (int i = 1000; i < 1023; i++) {
        printf("i: %d\n", i);
        assert(checkAcc(fields, i, 0));
        assert(checkAcc(fields, i, 1));
    }
    for (int i = 2000; i < 3000; i++) {
        assert(checkAcc(fields, i, 0));
        assert(checkAcc(fields, i, 1));
    }

    println("PASS");
}

void test_join() {
    print("test_join: ");

    int num_fields = 4;
    int num_items = 20;

    OwnedFields* source = runtime_init();
    OwnedFields* target = runtime_init();

    for (int i = 0; i < num_items; i++) {
        if (i % 2 == 0) {
            // Even IDs: field 0 added to source, 1 added to target
            runtime_add(source, i, num_fields, 0, "add failed");
            runtime_add(target, i, num_fields, 1, "add failed");
        } else {
            // Odd IDs: fields 0 & 2 added to source, 1 & 3 added to target
            runtime_add(source, i, num_fields, 0, "add failed");
            runtime_add(source, i, num_fields, 2, "add failed");
            runtime_add(target, i, num_fields, 1, "add failed");
            runtime_add(target, i, num_fields, 3, "add failed");
        }
    }

    runtime_join(target, source);
    
    for (int i = 0; i < num_items; i++) {
        if (i % 2 == 0) {
            // Even IDs: should have fields 0, 1
            assert(checkAcc(target, i, 0));
            assert(checkAcc(target, i, 1));
            assert(!checkAcc(target, i, 2));
            assert(!checkAcc(target, i, 3));
        } else {
            // Odd IDs: should have fields 0, 1, 2, 3
            assert(checkAcc(target, i, 0));
            assert(checkAcc(target, i, 1));
            assert(checkAcc(target, i, 2));
            assert(checkAcc(target, i, 3));
        }
    }

    println("PASS");
}

// Tests join in the case where `target` needs to be resized
void test_joinLarger() {
    print("test_joinLarger: ");

    int numFields = 2;
    OwnedFields* source = runtime_init();
    OwnedFields* target = runtime_init();

    // Target has field 0 for IDs 0-19
    for (int i = 0; i < 20; i++) {
        runtime_add(target, i, numFields, 0, "add failed (0)");
    }
    // Source has field 1 for IDs 0-999
    for (int i = 0; i < 1000; i++) {
        runtime_add(source, i, numFields, 1, "add failed (1)");
    }

    runtime_join(target, source);

    for (int i = 0; i < 1000; i++) {
        if (i < 20) assert(checkAcc(target, i, 0));
        assert(checkAcc(target, i, 1));
    }

    println("PASS");
}

void test_missing() {
    print("test_missing: ");

    OwnedFields* fields = runtime_init();

    int id = 10;
    runtime_addAll(fields, id, 5);
    
    for (int i = 0; i < 128; i++) {
        if (i != id)
            assert(!checkAcc(fields, i, 1));
    }

    println("PASS");
}

void test_ensureSeparate() {
    print("test_ensureSeparate: ");

    OwnedFields* fields = runtime_init();

    int numFields = 10;
    int id = 0;
    runtime_addAll(fields, id, numFields);

    for (int i = 0; i < numFields; i++) {
       assert(!runtime_tryAdd(fields, id, numFields, i));
    }

    id = 1;
    for (int i = 0; i < numFields; i++) {
        assert(runtime_tryAdd(fields, id, numFields, i));
    }

    // Add a bunch of items to force rehashing
    for (int i = 0; i < 128; i++){
        id++;
        runtime_addAll(fields, id, numFields);
    }

    // At this point, all fields (up to `numFields`) have been added for all IDs
    // from 0 to `id`. Check that none of these fields can be re-added.
    for (int i = 0; i < id; i++) {
        for (int f = 0; f < numFields; f++) {
            assert(!runtime_tryAdd(fields, i, numFields, f));
        }
    }

    println("PASS");
}

int main() {
    test_init();
    test_addAll();
    test_add();
    test_remove();
    test_resizing();
    test_resizingRemove();
    test_join();
    test_joinLarger();
    test_missing();
    test_ensureSeparate();

    println("All runtime tests passed");
    printint(-5 % 10);
    return 0;
}
