#use <runtime>

bool NassertAcc(OwnedFields* fields, int _id, int fieldIndex, string errorMessage){
    FieldArray* toCheck = find(fields, _id);
    if(toCheck == NULL || !toCheck->contents[fieldIndex]){
        return false;
    }else{
        return true;
    }
}

bool NaddAccEnsureSeparate(OwnedFields* fields, int _id, int fieldIndex, int numFields, string errorMessage){
    FieldArray* toCheck = find(fields, _id);
    if (toCheck == NULL) {
        toCheck = newFieldArray(fields, _id, numFields, false);
    } else if (toCheck->contents[fieldIndex]) {
        return false;
    }
    toCheck->contents[fieldIndex] = true;
    toCheck->numAccessible += 1;
    return true;
}

void debugOwnedFields(OwnedFields* fields, string name) {
    print("---[ ");
    print(name);
    print(" ]---\n");
    print("* Num. of structs: ");
    printint(fields->length);
    print("\n");
    print("* Capacity: ");
    printint(fields->capacity);
    print("\n");
    print("[");
    if(fields->capacity > 0){
        if(fields->contents[0] != NULL){
            printint(fields->contents[0]->_id);
        }else{
            print("NULL");
        }
        for(int i = 1; i < fields->capacity; i+=1){
            print(", ");
            if(fields->contents[i] != NULL){
                printint(fields->contents[i]->_id);
            }else{
                print("NULL");
            }
        }
    }
    print("]\n");
}

bool test(string header, bool condition, string message){
    if(!condition){
        error(string_join(string_join(header, " - "), message));
        return false;
    }else{
        return true;
    }
}

bool testOwnedFieldsInitialization(string header){
    OwnedFields* fields = initOwnedFields();
    if(!test(header, fields->capacity > 0, "(initOwnedFields) OwnedFields must have a nonzero default capacity after intialization.")){
        return false;
    }
    if(!test(header, fields->length == 0, "(initOwnedFields) OwnedFields must have a length of zero after initialization.")){
        return false;
    }

    bool allNULL = true;
    for(int i = 0; i < fields->length; i+=1){
        if(fields->contents[i] != NULL){
            allNULL = false;
        }
    }
    if(!test(header, allNULL, "(initOwnedFields) The contents of OwnedFields must all be set to NULL after initialization.")){
        return false;
    }
    return true;
}

bool testStructCreation(string header){
    OwnedFields* fields = initOwnedFields();

    int _id = 0;
    addStructAcc(fields, _id, 80);

    for(int i = 0; i<80; i += 1){
        assertAcc(fields, _id, i, "(addStructAcc) Failed to verify access to the fields of a newly created struct.");
    }
    return true;
}



bool testFieldAddition(string header){
    OwnedFields* fields_1 = initOwnedFields();
    OwnedFields* fields_2 = initOwnedFields();

    int _id = 0;
    addStructAcc(fields_1, _id, 4);

    addAcc(fields_2, _id, 4, 2);
    assertAcc(fields_2, _id, 2, "(addAcc/assertAcc) Failed to add an arbitrary singular field access permission to an OwnedFields struct.");
    return true;
}


bool testFieldMerging(string header){
    int num_fields = 20;

    OwnedFields* source = initOwnedFields();

    int _id_node_1 = 0;
    addStructAcc(source, _id_node_1, num_fields);
    int _id_node_2 = 1;
    addStructAcc(source, _id_node_2, num_fields);

    OwnedFields* fields_1 = initOwnedFields();

    OwnedFields* fields_2 = initOwnedFields();

    for(int i = 0; i<num_fields; i += 1){
        addAcc(fields_1, _id_node_1, num_fields, i);
        assertAcc(fields_1, _id_node_1, i, "(addAcc/assertAcc) Failed to add permission to new OwnedFields from source OwnedFields.");

        addAcc(fields_2, _id_node_2, num_fields, i);
        assertAcc(fields_2, _id_node_2, i, "(addAcc/assertAcc) Failed to add permission to new OwnedFields from source OwnedFields.");
    }


    join(fields_1, fields_2);

    for(int i = 0; i<num_fields; i += 1){
        assertAcc(fields_1, _id_node_1, i, "(join/assertAcc) Failed to preserve existing permissions after join.");
        assertAcc(fields_1, _id_node_2, i, "(join/assertAcc) Failed to add new permissions from join.");
    }
    return true;
}


/*
bool testFieldLoss(string header) {
    OwnedFields* source = initOwnedFields();

    int num_fields = 10;
    int _id_node = addStructAcc(source, 0, num_fields);

}
*/

bool testNegativeAccessibility(string header) {
    OwnedFields* source = initOwnedFields();

    int num_fields = 10;
    int _id_node = 0;
    addStructAcc(source, _id_node, num_fields);

    bool found = NassertAcc(source, _id_node+1, num_fields, "");
    if(found) error("ACK discovered.");

    return true;
}

bool testEnsureSeparate(string header) {
    OwnedFields* source = initOwnedFields();

    int num_fields = 10;
    int _id_node = 0;
    addStructAcc(source, _id_node, num_fields);

    for(int i = 0; i<num_fields; i+=1){
       bool shouldFail = NaddAccEnsureSeparate(source, _id_node, i, num_fields, "");
       if(shouldFail) error("Failed to ensure separation.");
    }

    for(int i = 0; i<num_fields; i+=1){
       bool shouldSucceed = NaddAccEnsureSeparate(source, 200, i, num_fields, "");
       if(!shouldSucceed) error("Failed to add separated fields.");
    }

    int _id = 1;
    for (int i = 0; i<64; i+=1){
       addStructAcc(source, _id, num_fields);
       _id++;
    }

    for(int i = 0; i<num_fields; i+=1){
       bool shouldFail = NaddAccEnsureSeparate(source, 200, i, num_fields, "");
       if(shouldFail) error("Failed to add separated fields after rehashing.");
    }
    return true;
}

int runTests() {
    if(testOwnedFieldsInitialization("OwnedFields Initialization")){
        println("PASS: OwnedFields Initialization");
    }else{
        println("FAIL: OwnedFields Initialization");
        return 1;
    }

    if(testStructCreation("Field Creation")){
        println("PASS: Field Creation");
    }else{
        println("FAIL: Field Creation");
        return 1;
    }

    if(testFieldAddition("Field Addition")){
        println("PASS: Field Addition");
    }else{
        println("FAIL: Field Addition");
        return 1;
    }

    if(testFieldMerging("Join")){
        println("PASS: Join");
    }else{
        println("FAIL: Join");
        return 1;
    }
/*
    if(testFieldLoss("loseAcc")){
        println("PASS: loseAck");
    }else{
        println("FAIL: loseAck");
        return 1;
    }
*/
    if(testNegativeAccessibility("Nacc")){
        println("PASS: Nacc");
    }else{
        println("FAIL: Nacc");
        return 1;
    }

    if(testEnsureSeparate("addAccEnsureSeparate")){
        println("PASS: addAccEnsureSeparate");
    }else{
        println("FAIL: addAccEnsureSeparate");
        return 1;
    }

    return 0;
}

int main(){
    return runTests();
}
