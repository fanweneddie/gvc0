#use <runtime>
struct Inner;
struct Outer;

struct Inner
{
  int value;
  int _id;
};

struct Outer
{
  struct Inner* inner;
  int _id;
};

struct Outer* createOuter(struct OwnedFields* _ownedFields, int* _instanceCounter);
int getValue(struct Outer* outer, struct OwnedFields* _ownedFields, int* _instanceCounter);
int getValueSafe(struct Outer* outer, struct OwnedFields* _ownedFields, int* _instanceCounter);
int getValueStatic(struct Outer* outer, struct OwnedFields* _ownedFields, int* _instanceCounter);
int main();

struct Outer* createOuter(struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  struct Inner* inner = NULL;
  struct Outer* outer = NULL;
  struct OwnedFields* _tempFields = NULL;
  _tempFields = runtime_init();
  assert(true);
  inner = alloc(struct Inner);
  inner->_id = *_instanceCounter;
  *_instanceCounter = *_instanceCounter + 1;
  runtime_addAll(_tempFields, inner->_id, 1);
  outer = alloc(struct Outer);
  outer->_id = *_instanceCounter;
  *_instanceCounter = *_instanceCounter + 1;
  runtime_addAll(_tempFields, outer->_id, 1);
  runtime_assert(_tempFields, outer == NULL ? -1 : outer->_id, 0, "No permission to access 'outer->inner'");
  outer->inner = inner;
  runtime_assert(_tempFields, outer == NULL ? -1 : outer->_id, 0, "No permission to access 'outer->inner'");
  runtime_assert(_tempFields, outer->inner == NULL ? -1 : outer->inner->_id, 0, "No permission to access 'outer->inner->value'");
  runtime_join(_ownedFields, _tempFields);
  return outer;
}

int getValue(struct Outer* outer, struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  runtime_assert(_ownedFields, outer == NULL ? -1 : outer->_id, 0, "No permission to access 'outer->inner'");
  runtime_assert(_ownedFields, outer->inner == NULL ? -1 : outer->inner->_id, 0, "No permission to access 'outer->inner->value'");
  runtime_assert(_ownedFields, outer->inner == NULL ? -1 : outer->inner->_id, 0, "No permission to access 'outer->inner->value'");
  return outer->inner->value;
}

int getValueSafe(struct Outer* outer, struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  int result = 0;
  if (outer != NULL)
  {
    runtime_assert(_ownedFields, outer == NULL ? -1 : outer->_id, 0, "No permission to access 'outer->inner'");
  }
  if (outer != NULL && outer->inner != NULL)
  {
    runtime_assert(_ownedFields, outer->inner == NULL ? -1 : outer->inner->_id, 0, "No permission to access 'outer->inner->value'");
    result = outer->inner->value;
  }
  else
  {
    result = 0;
  }
  return result;
}

int getValueStatic(struct Outer* outer, struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  struct OwnedFields* _tempFields = NULL;
  _tempFields = runtime_init();
  runtime_assert(_ownedFields, outer == NULL ? -1 : outer->_id, 0, "No permission to access 'outer->inner'");
  runtime_remove(_ownedFields, outer == NULL ? -1 : outer->_id, 0, "No permission to access 'outer->inner'");
  runtime_add(_tempFields, outer == NULL ? -1 : outer->_id, 1, 0, "Invalid aliasing - 'outer->inner' overlaps with existing permission");
  runtime_assert(_ownedFields, outer->inner == NULL ? -1 : outer->inner->_id, 0, "No permission to access 'outer->inner->value'");
  runtime_remove(_ownedFields, outer->inner == NULL ? -1 : outer->inner->_id, 0, "No permission to access 'outer->inner->value'");
  runtime_add(_tempFields, outer->inner == NULL ? -1 : outer->inner->_id, 1, 0, "Invalid aliasing - 'outer->inner->value' overlaps with existing permission");
  runtime_assert(_tempFields, outer->inner == NULL ? -1 : outer->inner->_id, 0, "No permission to access 'outer->inner->value'");
  runtime_assert(_tempFields, outer == NULL ? -1 : outer->_id, 0, "No permission to access 'outer->inner'");
  runtime_add(_ownedFields, outer == NULL ? -1 : outer->_id, 1, 0, "Invalid aliasing - 'outer->inner' overlaps with existing permission");
  runtime_assert(_tempFields, outer->inner == NULL ? -1 : outer->inner->_id, 0, "No permission to access 'outer->inner->value'");
  runtime_add(_ownedFields, outer->inner == NULL ? -1 : outer->inner->_id, 1, 0, "Invalid aliasing - 'outer->inner->value' overlaps with existing permission");
  return outer->inner->value;
}

int main()
{
  struct Outer* _ = NULL;
  int _1 = 0;
  struct OwnedFields* _ownedFields = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = runtime_init();
  assert(true);
  _ = createOuter(_ownedFields, _instanceCounter);
  _1 = getValue(_, _ownedFields, _instanceCounter);
  assert(true);
  return _1;
}
