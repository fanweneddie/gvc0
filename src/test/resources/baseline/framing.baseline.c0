#use <runtime>
struct Inner;
struct Outer;

struct Inner
{
  int value;
  int _id;
};

struct Outer
{
  struct Inner* inner;
  int _id;
};

struct Outer* createOuter(struct OwnedFields* _ownedFields);
int getValue(struct Outer* outer, struct OwnedFields* _ownedFields);
int getValueSafe(struct Outer* outer, struct OwnedFields* _ownedFields);
int getValueStatic(struct Outer* outer, struct OwnedFields* _ownedFields);
int main();

struct Outer* createOuter(struct OwnedFields* _ownedFields)
{
  struct Inner* inner = NULL;
  struct Outer* outer = NULL;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _contextFields = NULL;
  _contextFields = initOwnedFields(_ownedFields->instanceCounter);
  assert(true);
  inner = alloc(struct Inner);
  inner->_id = addStructAcc(_contextFields, 1);
  outer = alloc(struct Outer);
  outer->_id = addStructAcc(_contextFields, 1);
  assertAcc(_contextFields, outer != NULL ? outer->_id : -1, 0, "Field access runtime check failed for struct Outer.inner");
  outer->inner = inner;
  assertAcc(_contextFields, outer != NULL ? outer->_id : -1, 0, "Field access runtime check failed for struct Outer.inner");
  assertAcc(_contextFields, outer->inner != NULL ? outer->inner->_id : -1, 0, "Field access runtime check failed for struct Inner.value");
  _tempFields = initOwnedFields(_contextFields->instanceCounter);
  addAccEnsureSeparate(_tempFields, outer->inner != NULL ? outer->inner->_id : -1, 0, 1, "Overlapping field permissions for struct Inner.value");
  join(_ownedFields, _contextFields);
  return outer;
}

int getValue(struct Outer* outer, struct OwnedFields* _ownedFields)
{
  struct OwnedFields* _tempFields = NULL;
  assertAcc(_ownedFields, outer != NULL ? outer->_id : -1, 0, "Field access runtime check failed for struct Outer.inner");
  assertAcc(_ownedFields, outer->inner != NULL ? outer->inner->_id : -1, 0, "Field access runtime check failed for struct Inner.value");
  _tempFields = initOwnedFields(_ownedFields->instanceCounter);
  addAccEnsureSeparate(_tempFields, outer->inner != NULL ? outer->inner->_id : -1, 0, 1, "Overlapping field permissions for struct Inner.value");
  assertAcc(_ownedFields, outer != NULL ? outer->_id : -1, 0, "Field access runtime check failed for struct Outer.inner");
  assertAcc(_ownedFields, outer->inner != NULL ? outer->inner->_id : -1, 0, "Field access runtime check failed for struct Inner.value");
  return outer->inner->value;
}

int getValueSafe(struct Outer* outer, struct OwnedFields* _ownedFields)
{
  int result = 0;
  struct OwnedFields* _tempFields = NULL;
  if (outer != NULL)
  {
    assertAcc(_ownedFields, outer != NULL ? outer->_id : -1, 0, "Field access runtime check failed for struct Outer.inner");
  }
  if (outer != NULL && outer->inner != NULL)
  {
    assertAcc(_ownedFields, outer != NULL ? outer->_id : -1, 0, "Field access runtime check failed for struct Outer.inner");
    assertAcc(_ownedFields, outer->inner != NULL ? outer->inner->_id : -1, 0, "Field access runtime check failed for struct Inner.value");
    result = outer->inner->value;
  }
  else
  {
    result = 0;
  }
  return result;
}

int getValueStatic(struct Outer* outer, struct OwnedFields* _ownedFields)
{
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _contextFields = NULL;
  _contextFields = initOwnedFields(_ownedFields->instanceCounter);
  assertAcc(_ownedFields, outer != NULL ? outer->_id : -1, 0, "Field access runtime check failed for struct Outer.inner");
  addAcc(_contextFields, outer != NULL ? outer->_id : -1, 1, 0);
  loseAcc(_ownedFields, outer != NULL ? outer->_id : -1, 0);
  assertAcc(_ownedFields, outer->inner != NULL ? outer->inner->_id : -1, 0, "Field access runtime check failed for struct Inner.value");
  addAcc(_contextFields, outer->inner != NULL ? outer->inner->_id : -1, 1, 0);
  loseAcc(_ownedFields, outer->inner != NULL ? outer->inner->_id : -1, 0);
  assertAcc(_contextFields, outer != NULL ? outer->_id : -1, 0, "Field access runtime check failed for struct Outer.inner");
  assertAcc(_contextFields, outer->inner != NULL ? outer->inner->_id : -1, 0, "Field access runtime check failed for struct Inner.value");
  assertAcc(_contextFields, outer != NULL ? outer->_id : -1, 0, "Field access runtime check failed for struct Outer.inner");
  assertAcc(_contextFields, outer->inner != NULL ? outer->inner->_id : -1, 0, "Field access runtime check failed for struct Inner.value");
  _tempFields = initOwnedFields(_contextFields->instanceCounter);
  addAccEnsureSeparate(_tempFields, outer != NULL ? outer->_id : -1, 0, 1, "Overlapping field permissions for struct Outer.inner");
  addAccEnsureSeparate(_tempFields, outer->inner != NULL ? outer->inner->_id : -1, 0, 1, "Overlapping field permissions for struct Inner.value");
  addAcc(_ownedFields, outer->_id, 1, 0);
  addAcc(_ownedFields, outer->inner->_id, 1, 0);
  return outer->inner->value;
}

int main()
{
  struct Outer* _ = NULL;
  int _1 = 0;
  struct OwnedFields* _ownedFields = NULL;
  struct OwnedFields* _tempFields = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = initOwnedFields(_instanceCounter);
  assert(true);
  _ = createOuter(_ownedFields);
  _1 = getValue(_, _ownedFields);
  assert(true);
  return _1;
}
