#use <runtime>
struct Node;

struct Node
{
  int value;
  struct Node* next;
  int _id;
};

void add_list(struct Node* node, struct OwnedFields* _ownedFields);
void check_add_remove_list(struct Node* node, struct OwnedFields* _ownedFields, struct OwnedFields* _tempFields);
struct Node* emptyList(struct OwnedFields* _ownedFields);
void list(struct Node* node, struct OwnedFields* _ownedFields);
int main();
struct Node* prependList(int value, struct Node* node, struct OwnedFields* _ownedFields);
void sep_list(struct Node* node, struct OwnedFields* _ownedFields);

void add_list(struct Node* node, struct OwnedFields* _ownedFields)
{
  if (!(node == NULL))
  {
    addAcc(_ownedFields, node->_id, 2, 0);
    add_list(node->next, _ownedFields);
  }
}

void check_add_remove_list(struct Node* node, struct OwnedFields* _ownedFields, struct OwnedFields* _tempFields)
{
  if (node == NULL)
  {
    assert(true);
  }
  else
  {
    assertAcc(_tempFields, node != NULL ? node->_id : -1, 0, "Field access runtime check failed for struct Node.value");
    addAcc(_ownedFields, node != NULL ? node->_id : -1, 2, 0);
    loseAcc(_tempFields, node != NULL ? node->_id : -1, 0);
    check_add_remove_list(node->next, _ownedFields, _tempFields);
  }
}

struct Node* emptyList(struct OwnedFields* _ownedFields)
{
  struct Node* nullList = NULL;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _contextFields = NULL;
  _contextFields = initOwnedFields(_ownedFields->instanceCounter);
  assert(true);
  nullList = NULL;
  list(nullList, _contextFields);
  _tempFields = initOwnedFields(_contextFields->instanceCounter);
  sep_list(nullList, _tempFields);
  add_list(nullList, _ownedFields);
  return nullList;
}

void list(struct Node* node, struct OwnedFields* _ownedFields)
{
  if (node == NULL)
  {
    assert(true);
  }
  else
  {
    assertAcc(_ownedFields, node != NULL ? node->_id : -1, 0, "Field access runtime check failed for struct Node.value");
    list(node->next, _ownedFields);
  }
}

int main()
{
  struct OwnedFields* _ownedFields = NULL;
  struct OwnedFields* _tempFields = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = initOwnedFields(_instanceCounter);
  assert(true);
  assert(true);
  return 0;
}

struct Node* prependList(int value, struct Node* node, struct OwnedFields* _ownedFields)
{
  struct Node* newNode = NULL;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _contextFields = NULL;
  _contextFields = initOwnedFields(_ownedFields->instanceCounter);
  check_add_remove_list(node, _contextFields, _ownedFields);
  newNode = alloc(struct Node);
  newNode->_id = addStructAcc(_contextFields, 2);
  assertAcc(_contextFields, newNode != NULL ? newNode->_id : -1, 1, "Field access runtime check failed for struct Node.next");
  newNode->next = node;
  assertAcc(_contextFields, newNode != NULL ? newNode->_id : -1, 0, "Field access runtime check failed for struct Node.value");
  newNode->value = value;
  list(newNode, _contextFields);
  _tempFields = initOwnedFields(_contextFields->instanceCounter);
  sep_list(newNode, _tempFields);
  add_list(newNode, _ownedFields);
  return newNode;
}

void sep_list(struct Node* node, struct OwnedFields* _ownedFields)
{
  if (!(node == NULL))
  {
    addAccEnsureSeparate(_ownedFields, node != NULL ? node->_id : -1, 0, 2, "Overlapping field permissions for struct Node.value");
    sep_list(node->next, _ownedFields);
  }
}
