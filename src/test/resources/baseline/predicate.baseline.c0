#use <runtime>
struct Node;

struct Node
{
  int value;
  struct Node* next;
  int _id;
};

void assert_add_list(struct Node* node, struct OwnedFields* assert_perms, struct OwnedFields* add_perms, int* _instanceCounter);
void assert_remove_add_list(struct Node* node, struct OwnedFields* assert_perms, struct OwnedFields* remove_perms, struct OwnedFields* add_perms, int* _instanceCounter);
struct Node* emptyList(struct OwnedFields* _ownedFields, int* _instanceCounter);
int main();
struct Node* prependList(int value, struct Node* node, struct OwnedFields* _ownedFields, int* _instanceCounter);

void assert_add_list(struct Node* node, struct OwnedFields* assert_perms, struct OwnedFields* add_perms, int* _instanceCounter)
{
  if (node == NULL)
  {
    assert(true);
  }
  else
  {
    runtime_assert(assert_perms, node == NULL ? -1 : node->_id, 0, "No permission to access 'node->value'");
    runtime_add(add_perms, node == NULL ? -1 : node->_id, 2, 0, "Invalid aliasing - 'node->value' overlaps with existing permission");
    assert_add_list(node->next, assert_perms, add_perms, _instanceCounter);
  }
}

void assert_remove_add_list(struct Node* node, struct OwnedFields* assert_perms, struct OwnedFields* remove_perms, struct OwnedFields* add_perms, int* _instanceCounter)
{
  if (node == NULL)
  {
    assert(true);
  }
  else
  {
    runtime_assert(assert_perms, node == NULL ? -1 : node->_id, 0, "No permission to access 'node->value'");
    runtime_remove(remove_perms, node == NULL ? -1 : node->_id, 0, "No permission to access 'node->value'");
    runtime_add(add_perms, node == NULL ? -1 : node->_id, 2, 0, "Invalid aliasing - 'node->value' overlaps with existing permission");
    assert_remove_add_list(node->next, assert_perms, remove_perms, add_perms, _instanceCounter);
  }
}

struct Node* emptyList(struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  struct Node* nullList = NULL;
  struct OwnedFields* _tempFields = NULL;
  _tempFields = runtime_init();
  assert(true);
  nullList = NULL;
  assert_add_list(nullList, _tempFields, _ownedFields, _instanceCounter);
  return nullList;
}

int main()
{
  struct OwnedFields* _ownedFields = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = runtime_init();
  assert(true);
  assert(true);
  return 0;
}

struct Node* prependList(int value, struct Node* node, struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  struct Node* newNode = NULL;
  struct OwnedFields* _tempFields = NULL;
  _tempFields = runtime_init();
  assert_remove_add_list(node, _ownedFields, _ownedFields, _tempFields, _instanceCounter);
  newNode = alloc(struct Node);
  newNode->_id = *_instanceCounter;
  *_instanceCounter = *_instanceCounter + 1;
  runtime_addAll(_tempFields, newNode->_id, 2);
  runtime_assert(_tempFields, newNode == NULL ? -1 : newNode->_id, 1, "No permission to access 'newNode->next'");
  newNode->next = node;
  runtime_assert(_tempFields, newNode == NULL ? -1 : newNode->_id, 0, "No permission to access 'newNode->value'");
  newNode->value = value;
  assert_add_list(newNode, _tempFields, _ownedFields, _instanceCounter);
  return newNode;
}
