#use <runtime>
struct Test;

struct Test
{
  int value;
  int _id;
};

struct Test* createTest(struct OwnedFields* _ownedFields);
int getValue(struct Test* test, struct OwnedFields* _ownedFields);
int main();

struct Test* createTest(struct OwnedFields* _ownedFields)
{
  struct Test* _ = NULL;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _contextFields = NULL;
  _contextFields = initOwnedFields(_ownedFields->instanceCounter);
  assert(true);
  _ = alloc(struct Test);
  _->_id = addStructAcc(_contextFields, 2);
  assertAcc(_contextFields, _ != NULL ? _->_id : -1, 0, "Field access runtime check failed for struct Test.value");
  _tempFields = initOwnedFields(_contextFields->instanceCounter);
  addAccEnsureSeparate(_tempFields, _ != NULL ? _->_id : -1, 0, 2, "Overlapping field permissions for struct Test.value");
  addAcc(_ownedFields, _->_id, 2, 0);
  return _;
}

int getValue(struct Test* test, struct OwnedFields* _ownedFields)
{
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _contextFields = NULL;
  _contextFields = initOwnedFields(_ownedFields->instanceCounter);
  assertAcc(_ownedFields, test != NULL ? test->_id : -1, 0, "Field access runtime check failed for struct Test.value");
  addAcc(_contextFields, test != NULL ? test->_id : -1, 2, 0);
  loseAcc(_ownedFields, test != NULL ? test->_id : -1, 0);
  assertAcc(_contextFields, test != NULL ? test->_id : -1, 0, "Field access runtime check failed for struct Test.value");
  assert(true);
  return test->value;
}

int main()
{
  struct Test* _ = NULL;
  int _1 = 0;
  struct OwnedFields* _ownedFields = NULL;
  struct OwnedFields* _tempFields = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = initOwnedFields(_instanceCounter);
  assert(true);
  _ = createTest(_ownedFields);
  _1 = getValue(_, _ownedFields);
  assert(true);
  return _1;
}
