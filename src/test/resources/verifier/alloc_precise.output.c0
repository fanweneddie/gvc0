#use <runtime>
struct A;

struct A
{
  int value;
  int _id;
};

struct A* create(int* _instanceCounter);
int main();
void test(struct A* x, struct A* y, struct OwnedFields* _ownedFields, int* _instanceCounter);
void test2(struct A* x, struct A* y, int* _instanceCounter);

struct A* create(int* _instanceCounter)
{
  struct A* _ = NULL;
  _ = alloc(struct A);
  _->_id = *_instanceCounter;
  *_instanceCounter = *_instanceCounter + 1;
  return _;
}

int main()
{
  struct A* _ = NULL;
  struct A* _1 = NULL;
  struct OwnedFields* _ownedFields = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = initOwnedFields();
  _ = create(_instanceCounter);
  addAcc(_ownedFields, _->_id, 1, 0);
  _1 = create(_instanceCounter);
  addAcc(_ownedFields, _1->_id, 1, 0);
  test(_, _1, _ownedFields, _instanceCounter);
  return 0;
}

void test(struct A* x, struct A* y, struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  assertAcc(_ownedFields, y != NULL ? y->_id : -1, 0, "Field access runtime check failed for struct A.value");
  assertAcc(_ownedFields, x != NULL ? x->_id : -1, 0, "Field access runtime check failed for struct A.value");
  assert(!(x == NULL));
  assert(!(y == NULL));
  loseAcc(_ownedFields, x->_id, 0);
  loseAcc(_ownedFields, y->_id, 0);
  test2(x, y, _instanceCounter);
}

void test2(struct A* x, struct A* y, int* _instanceCounter)
{
}
