#use <runtime>
struct A;

struct A
{
  int value;
  int _id;
};

struct A* create(int* _instanceCounter);
int main();
void test(struct A* x, struct A* y, struct OwnedFields* _ownedFields, int* _instanceCounter);
void test2(struct A* x, struct A* y, int* _instanceCounter);

struct A* create(int* _instanceCounter)
{
  struct A* _ = NULL;
  _ = alloc(struct A);
  _->_id = *_instanceCounter;
  *_instanceCounter = *_instanceCounter + 1;
  return _;
}

int main()
{
  struct A* _ = NULL;
  struct A* _1 = NULL;
  struct OwnedFields* _ownedFields = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = runtime_init();
  _ = create(_instanceCounter);
  runtime_add(_ownedFields, _ == NULL ? -1 : _->_id, 1, 0, "Invalid aliasing - '_->value' overlaps with existing permission");
  _1 = create(_instanceCounter);
  runtime_add(_ownedFields, _1 == NULL ? -1 : _1->_id, 1, 0, "Invalid aliasing - '_1->value' overlaps with existing permission");
  test(_, _1, _ownedFields, _instanceCounter);
  return 0;
}

void test(struct A* x, struct A* y, struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  struct OwnedFields* _tempFields = NULL;
  _tempFields = runtime_init();
  runtime_assert(_ownedFields, y == NULL ? -1 : y->_id, 0, "No permission to access 'y->value'");
  runtime_assert(_ownedFields, x == NULL ? -1 : x->_id, 0, "No permission to access 'x->value'");
  assert(!(x == NULL));
  assert(!(y == NULL));
  runtime_add(_tempFields, x == NULL ? -1 : x->_id, 1, 0, "Invalid aliasing - 'x->value' overlaps with existing permission");
  runtime_add(_tempFields, y == NULL ? -1 : y->_id, 1, 0, "Invalid aliasing - 'y->value' overlaps with existing permission");
  runtime_remove(_ownedFields, x->_id, 0, "No permission to access 'x->value'");
  runtime_remove(_ownedFields, y->_id, 0, "No permission to access 'y->value'");
  test2(x, y, _instanceCounter);
}

void test2(struct A* x, struct A* y, int* _instanceCounter)
{
}
