#use <runtime>
struct Node;

struct Node
{
  int val;
  struct Node* next;
  int _id;
};

void appendLemmaAfterLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int bVal, int cVal, struct OwnedFields* _ownedFields, int* _instanceCounter);
int main();

void appendLemmaAfterLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int bVal, int cVal, struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  bool _cond = false;
  bool _cond1 = false;
  bool _cond2 = false;
  _cond = b == c;
  _cond1 = c == b;
  if (!(b == c))
  {
  }
  else
  {
    _cond2 = a == c;
    if (a == b)
    {
    }
    else
    {
      if (_cond && _cond1 && _cond1 && !_cond2)
      {
        runtime_assert(_ownedFields, a == NULL ? -1 : a->_id, 1, "No permission to access 'a->next'");
        runtime_assert(_ownedFields, a == NULL ? -1 : a->_id, 0, "No permission to access 'a->val'");
      }
      appendLemmaAfterLoopBody(a->next, b, c, a->val, bVal, cVal, _ownedFields, _instanceCounter);
    }
  }
}

int main()
{
  struct Node* l = NULL;
  struct Node* l1 = NULL;
  struct Node* l11 = NULL;
  struct Node* l111 = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  l = NULL;
  l1 = NULL;
  l11 = NULL;
  l111 = NULL;
  return 0;
}
