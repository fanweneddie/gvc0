#use <runtime>
struct Test;

struct Test
{
  int a;
  int b;
  int _id;
};

struct Test* getTest(struct OwnedFields* _ownedFields, int* _instanceCounter);
int main();

struct Test* getTest(struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  struct Test* _ = NULL;
  _ = alloc(struct Test);
  _->_id = *_instanceCounter;
  *_instanceCounter = *_instanceCounter + 1;
  runtime_addAll(_ownedFields, _->_id, 2);
  return _;
}

int main()
{
  struct Test* test = NULL;
  struct OwnedFields* _ownedFields = NULL;
  bool _cond = false;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = runtime_init();
  test = getTest(_ownedFields, _instanceCounter);
  runtime_assert(_ownedFields, test == NULL ? -1 : test->_id, 0, "No permission to access 'test->a'");
  runtime_assert(_ownedFields, test == NULL ? -1 : test->_id, 0, "No permission to access 'test->a'");
  _cond = !(test == NULL) && test->a == 0;
  if (test->a == 0)
  {
    if (_cond)
    {
      runtime_assert(_ownedFields, test == NULL ? -1 : test->_id, 1, "No permission to access 'test->b'");
    }
    test->b = 1;
  }
  return 0;
}
