#use <runtime>
struct Test;

struct Test
{
  int value;
  int _id;
};

struct Test* getTest(struct OwnedFields* _ownedFields, int* _instanceCounter);
struct Test* getTestPrecise(int* _instanceCounter);
int main();

struct Test* getTest(struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  struct Test* _ = NULL;
  _ = alloc(struct Test);
  _->_id = *_instanceCounter;
  *_instanceCounter = *_instanceCounter + 1;
  runtime_addAll(_ownedFields, _->_id, 1);
  return _;
}

struct Test* getTestPrecise(int* _instanceCounter)
{
  struct Test* _ = NULL;
  struct OwnedFields* _ownedFields = NULL;
  _ownedFields = runtime_init();
  _ = getTest(_ownedFields, _instanceCounter);
  runtime_assert(_ownedFields, _ == NULL ? -1 : _->_id, 0, "No permission to access '_->value'");
  assert(!(_ == NULL));
  return _;
}

int main()
{
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  return 0;
}
