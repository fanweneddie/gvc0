#use <runtime>
struct _ptr_int;

struct _ptr_int
{
  int value;
  int _id;
};

struct _ptr_int* create(struct OwnedFields* _ownedFields, int* _instanceCounter);
void ensureSeparate(struct _ptr_int* x, struct _ptr_int* y, int* _instanceCounter);
int main();
void test(struct _ptr_int* x, struct _ptr_int* y, struct OwnedFields* _ownedFields, int* _instanceCounter);

struct _ptr_int* create(struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  struct _ptr_int* _ = NULL;
  _ = alloc(struct _ptr_int);
  _->_id = *_instanceCounter;
  *_instanceCounter = *_instanceCounter + 1;
  addStructAcc(_ownedFields, _->_id, 1);
  return _;
}

void ensureSeparate(struct _ptr_int* x, struct _ptr_int* y, int* _instanceCounter)
{
}

int main()
{
  struct _ptr_int* _ = NULL;
  struct _ptr_int* _1 = NULL;
  struct OwnedFields* _ownedFields = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = initOwnedFields();
  _ = create(_ownedFields, _instanceCounter);
  _1 = create(_ownedFields, _instanceCounter);
  test(_, _1, _ownedFields, _instanceCounter);
  return 0;
}

void test(struct _ptr_int* x, struct _ptr_int* y, struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  struct OwnedFields* _tempFields = NULL;
  _tempFields = initOwnedFields();
  assertAcc(_ownedFields, y != NULL ? y->_id : -1, 0, "Field access runtime check failed for struct _ptr_int.value");
  assertAcc(_ownedFields, x != NULL ? x->_id : -1, 0, "Field access runtime check failed for struct _ptr_int.value");
  assert(!(x == NULL));
  assert(!(y == NULL));
  addAccEnsureSeparate(_tempFields, x != NULL ? x->_id : -1, 0, 1, "Overlapping field permissions for struct _ptr_int.value");
  addAccEnsureSeparate(_tempFields, y != NULL ? y->_id : -1, 0, 1, "Overlapping field permissions for struct _ptr_int.value");
  loseAcc(_ownedFields, x->_id, 0);
  loseAcc(_ownedFields, y->_id, 0);
  ensureSeparate(x, y, _instanceCounter);
}
