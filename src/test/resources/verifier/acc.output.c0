#use <runtime>
struct Test;

struct Test
{
  int value;
  int _id;
};

int main();
void setValue(struct Test* t, int* _instanceCounter);
void test(struct Test* t, struct OwnedFields* _ownedFields, int* _instanceCounter);

int main()
{
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  return 0;
}

void setValue(struct Test* t, int* _instanceCounter)
{
  t->value = 1;
}

void test(struct Test* t, struct OwnedFields* _ownedFields, int* _instanceCounter)
{
  runtime_assert(_ownedFields, t == NULL ? -1 : t->_id, 0, "No permission to access 't->value'");
  assert(!(t == NULL));
  runtime_remove(_ownedFields, t->_id, 0, "No permission to access 't->value'");
  setValue(t, _instanceCounter);
  runtime_add(_ownedFields, t == NULL ? -1 : t->_id, 1, 0, "Invalid aliasing - 't->value' overlaps with existing permission");
}
