#use <runtime>
struct _ptr_int;
struct _ptr_int_;

struct _ptr_int
{
  int value;
  int _id;
};

struct _ptr_int_
{
  struct _ptr_int* value;
  int _id;
};

struct _ptr_int* create(struct OwnedFields* _ownedFields);
struct _ptr_int_* createNested(struct OwnedFields* _ownedFields);
int get(struct OwnedFields* _ownedFields);
int main();
void test(int x, struct _ptr_int_* y, struct _ptr_int* z, struct OwnedFields* _ownedFields);

struct _ptr_int* create(struct OwnedFields* _ownedFields)
{
  struct _ptr_int* _ = NULL;
  _ = alloc(struct _ptr_int);
  _->_id = addStructAcc(_ownedFields, 1);
  return _;
}

struct _ptr_int_* createNested(struct OwnedFields* _ownedFields)
{
  struct _ptr_int_* ptr = NULL;
  struct _ptr_int* _ = NULL;
  struct OwnedFields* _tempFields = NULL;
  ptr = alloc(struct _ptr_int_);
  ptr->_id = addStructAcc(_ownedFields, 1);
  _tempFields = initOwnedFields(_ownedFields->instanceCounter);
  _ = create(_tempFields);
  join(_ownedFields, _tempFields);
  ptr->value = _;
  return ptr;
}

int get(struct OwnedFields* _ownedFields)
{
  return 1;
}

int main()
{
  int v = 0;
  struct _ptr_int_* a = NULL;
  struct _ptr_int* b = NULL;
  int* _instanceCounter = NULL;
  struct OwnedFields* _ownedFields = NULL;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _tempFields1 = NULL;
  struct OwnedFields* _tempFields2 = NULL;
  struct OwnedFields* _tempFields3 = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = initOwnedFields(_instanceCounter);
  _tempFields1 = initOwnedFields(_instanceCounter);
  v = get(_tempFields1);
  join(_ownedFields, _tempFields1);
  _tempFields2 = initOwnedFields(_instanceCounter);
  a = createNested(_tempFields2);
  join(_ownedFields, _tempFields2);
  _tempFields3 = initOwnedFields(_instanceCounter);
  b = create(_tempFields3);
  join(_ownedFields, _tempFields3);
  _tempFields = initOwnedFields(_instanceCounter);
  assertAcc(_ownedFields, a != NULL ? a->_id : -1, 0, "Field access runtime check failed for struct _ptr_int_.value");
  if (v == 1)
  {
    assertAcc(_ownedFields, b != NULL ? b->_id : -1, 0, "Field access runtime check failed for struct _ptr_int.value");
  }
  assertAcc(_ownedFields, a->value != NULL ? a->value->_id : -1, 0, "Field access runtime check failed for struct _ptr_int.value");
  assert(!(a->value == NULL));
  addAccEnsureSeparate(_tempFields, a->value != NULL ? a->value->_id : -1, 0, 1, "Overlapping field permissions for struct _ptr_int.value");
  if (v == 1)
  {
    assert(!(b == NULL));
    addAccEnsureSeparate(_tempFields, b != NULL ? b->_id : -1, 0, 1, "Overlapping field permissions for struct _ptr_int.value");
  }
  test(v, a, b, _ownedFields);
  return 0;
}

void test(int x, struct _ptr_int_* y, struct _ptr_int* z, struct OwnedFields* _ownedFields)
{
}
